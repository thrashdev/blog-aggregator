// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: follows.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
INSERT INTO feed_follows(id, user_id, feed_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
	RETURNING id, user_id, feed_id, created_at, updated_at
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.UserID,
		arg.FeedID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createFeedFollowCLI = `-- name: CreateFeedFollowCLI :one
WITH inserted_follow as (
	INSERT INTO feed_follows(id, user_id, feed_id, created_at, updated_at)
	VALUES ($1, $2, $3, $4, $5)
		returning id, user_id, feed_id, created_at, updated_at
)

select if.id, if.user_id, if.feed_id, if.created_at, if.updated_at, u.name, f.name from inserted_follow as if
join users u on if.user_id = u.id
join feeds f on if.feed_id = f.id
`

type CreateFeedFollowCLIParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

type CreateFeedFollowCLIRow struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      sql.NullString
	Name_2    sql.NullString
}

func (q *Queries) CreateFeedFollowCLI(ctx context.Context, arg CreateFeedFollowCLIParams) (CreateFeedFollowCLIRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollowCLI,
		arg.ID,
		arg.UserID,
		arg.FeedID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CreateFeedFollowCLIRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Name_2,
	)
	return i, err
}

const deleteFeedFollowsByID = `-- name: DeleteFeedFollowsByID :exec
DELETE FROM feed_follows 
WHERE id = $1
`

func (q *Queries) DeleteFeedFollowsByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollowsByID, id)
	return err
}

const getFeedFollowsByUserID = `-- name: GetFeedFollowsByUserID :many
select id, user_id, feed_id, created_at, updated_at from feed_follows
where user_id = $1
`

func (q *Queries) GetFeedFollowsByUserID(ctx context.Context, userID uuid.UUID) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedFollowsByUserIDCLI = `-- name: GetFeedFollowsByUserIDCLI :many
select ff.id, ff.user_id, ff.feed_id, ff.created_at, ff.updated_at, u.name, f.name from feed_follows ff
join users u on ff.user_id = u.id
join feeds f on ff.feed_id = f.id
where u.id = $1
`

type GetFeedFollowsByUserIDCLIRow struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      sql.NullString
	Name_2    sql.NullString
}

func (q *Queries) GetFeedFollowsByUserIDCLI(ctx context.Context, id uuid.UUID) ([]GetFeedFollowsByUserIDCLIRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsByUserIDCLI, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsByUserIDCLIRow
	for rows.Next() {
		var i GetFeedFollowsByUserIDCLIRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Name_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
